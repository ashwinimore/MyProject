package automationFramework;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.Console;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class Test_DCDT {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    driver.manage().window().maximize();
    baseUrl = "http://54.200.44.56/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testDCDT() throws Exception {
    driver.get(baseUrl + "/web/site/home");
    //driver.findElement(By.linkText("Direct Transport Sandbox")).click();
    driver.findElement(By.xpath("(//a[contains(text(),'View details »')])[2]")).click();
    Thread.sleep(5000);    
   
    driver.get("http://54.200.44.56//web/site/direct-certificate-discovery-tool");
    //Automatic scrolling
    driver.findElement(By.xpath("//a[contains(@href,\"#panel_hosting\")]")).click();
    //Thread.sleep(5000); 
    Select select = new Select(driver.findElement(By.tagName("select")));
    //select.deselectAll();
    
    assertFalse(select.isMultiple());
    assertEquals(5,select.getOptions().size());
  //H1
    select.selectByVisibleText("H1 - Normal address-bound certificate search in DNS");
    driver.findElement(By.id("testcase-hosting-direct-addr")).sendKeys("provider1@direct.sitenv.org");
    driver.findElement(By.id("testcase-hosting-submit")).click();
    driver.getPageSource().contains("Success: false");
    driver.getPageSource().contains("DNS lookup (recordType=SRV, directAddrName=_ldap._tcp.direct.sitenv.org.) failed");
    driver.getPageSource().contains("Discovered Valid Certificate: None");
    driver.getPageSource().contains("Discovered Invalid Certificate(s): None");
    System.out.println("H1 executed");

    //H2
    System.out.println("Test case H2");
    Select select1 = new Select(driver.findElement(By.tagName("select")));
    select1.selectByVisibleText("H2 - Normal domain-bound certificate search in DNS");
    driver.getPageSource().contains("Success: true");
    driver.getPageSource().contains("DNS lookup (recordType=CERT, directAddrName=direct.sitenv.org) was successful:");
       
    
    //H3
    select.selectByVisibleText("H3 - Normal address-bound certificate search in LDAP");
    driver.getPageSource().contains("Success: false");
    driver.getPageSource().contains("DNS lookup (recordType=SRV, directAddrName=_ldap._tcp.direct.sitenv.org.) failed");
    driver.getPageSource().contains("Discovered Valid Certificate: None");
    driver.getPageSource().contains("Discovered Invalid Certificate(s): None");
    System.out.println("Test case H3");
    
    //H4
    select.selectByVisibleText("H4 - Normal domain-bound certificate search in LDAP");
    driver.getPageSource().contains("Success: false");
    driver.getPageSource().contains("DNS lookup (recordType=SRV, directAddrName=_ldap._tcp.direct.sitenv.org.) failed");
    driver.getPageSource().contains("Discovered Valid Certificate: None");
    driver.getPageSource().contains("Discovered Invalid Certificate(s): None");
    System.out.println("Test case H4");
    
    driver.findElement(By.xpath("//a[contains(@href,\"#panel_discovery\")]")).click();
    //driver.findElement(By.linkText("Download Trust Anchor")).click();
    //Thread.sleep(5000);
    //Alert alert=driver.switchTo().alert();
    //String alertText = alert.getText();
	//System.out.println(alertText);
    //alert.accept(); 
    
    
    driver.findElement(By.id("directAddress")).sendKeys("Provider1@direct.sitenv.org");
    driver.findElement(By.id("resultsAddress")).sendKeys("a@nqm");
    driver.findElement(By.id("discovery-mail-mapping-submit")).click();
    driver.findElement(By.className("formErrorContent")).getText().contains("* Must be an email address.");
    
    driver.findElement(By.id("resultsAddress")).clear();
    driver.findElement(By.id("resultsAddress")).sendKeys("amore@ainq.com");
    driver.findElement(By.id("discovery-mail-mapping-submit")).click();
    driver.getPageSource().contains("You have successfully associated the Direct address Provider1@direct.sitenv.org with the results address amore@ainq.com.");
    Thread.sleep(5000);
    //Select Discovery Test Case
   
    //driver.findElement(By.id("testcase-select")).click();
    Select select2 = new Select(driver.findElement(By.tagName("select")));
    select2.selectByVisibleText("D1 - Valid address-bound certificate discovery in DNS");
    
    //Direct Instance
    driver.get("http://54.200.44.56/web/site/direct-transport-test-tool");
    driver.findElement(By.id("anchoruploadfile")).sendKeys("C:\\Users\\amore\\Desktop\\Selenium\\direct.sitenv.org_ca");
    driver.findElement(By.id("anchoruploadsubmit")).click();
    
    driver.findElement(By.xpath("//div[@id='main-content']/div[2]")).click();
    driver.findElement(By.id("precannedemail")).sendKeys("d1@domain1.demo.direct-test.com");
    driver.findElement(By.xpath("/html/body/div[3]/div/div/div[2]/div[2]/div[1]/div/div/div/div/div/div/div[3]/div[2]/div[1]/div/div[1]/div/form/div/div/div/div[1]/ul/li/div/ul/li/ul/li[1]/ul/li[1]/ul/li[1]/a")).click();
    driver.findElement(By.id("precannedCCDAsubmit")).click();
    
    
  
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
